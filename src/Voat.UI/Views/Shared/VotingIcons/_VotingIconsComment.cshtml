@*
    
    Copyright(c) Voat, Inc.

    This file is part of Voat.

    This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl-3.0.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an
    "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
    or implied. See the License for the specific language governing
    rights and limitations under the License.

    All Rights Reserved.

*@

@using Voat.Domain.Models
@model Comment

@{
    string collapsedStyle = Convert.ToString(ViewData["collapsedStyle"]);

    //default voting icons style
    string votingStatusClassUpArrow = "arrow-upvote";
    string votingStatusClassDownArrow = "arrow-downvote";
    string likesOrDislikesClass = "unvoted";
    string upVoteJavaScript = "mustLogin();";
    string downVoteJavaScript = "mustLogin();";

    Submission submission = ViewBag.Submission;

    Voat.Domain.Models.VoteTypeAllowed voteTypeAllowed = ViewBag.VoteTypeAllowed == null ? Voat.Domain.Models.VoteTypeAllowed.Any : (Voat.Domain.Models.VoteTypeAllowed)ViewBag.VoteTypeAllowed;
    if (submission != null && submission.ArchiveDate.HasValue)
    {
        voteTypeAllowed = Voat.Domain.Models.VoteTypeAllowed.None;
    }


    if (voteTypeAllowed == Voat.Domain.Models.VoteTypeAllowed.None)
    {
        <div class="midcol unvoted">
            <div class="score dislikes">@Model.DownCount</div>
            <div class="score submissionscore">@Model.Sum</div>
            <div class="score likes">@Model.UpCount</div>
        </div>
    }
    else
    {

        if (Model.Vote.HasValue)
        {
            switch (Model.Vote.Value)
            {
                case 1:
                    votingStatusClassUpArrow = "arrow-upvoted";
                    votingStatusClassDownArrow = "arrow-downvote";
                    likesOrDislikesClass = "likes";
                    break;
                case -1:
                    likesOrDislikesClass = "dislikes";
                    votingStatusClassUpArrow = "arrow-upvote";
                    votingStatusClassDownArrow = "arrow-downvoted";
                    break;
            }
            upVoteJavaScript = String.Format("voteComment({0}, 1);", Model.ID);
            downVoteJavaScript = String.Format("voteComment({0}, -1);", Model.ID);
        }

        <div class="midcol @likesOrDislikesClass" style="@collapsedStyle">
            @if ((voteTypeAllowed & Voat.Domain.Models.VoteTypeAllowed.Up) > 0)
            {
                <div class="@votingStatusClassUpArrow login-required" onclick="@upVoteJavaScript" role="button" aria-label="upvote" tabindex="0"></div>
            }
            @if ((voteTypeAllowed & Voat.Domain.Models.VoteTypeAllowed.Down) > 0)
            {
                <div class="@votingStatusClassDownArrow login-required" onclick="@downVoteJavaScript" role="button" aria-label="downvote" tabindex="0"></div>
            }
        </div>

    }
}
